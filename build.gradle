buildscript {
	def kotlinVersion = project.properties["kotlinVersion"]?.toString() ?: ""
	def isKotlinDev = kotlinVersion.contains("-release")
	repositories {
		maven { url = uri("https://plugins.gradle.org/m2/") }
		if (isKotlinDev) {
			maven { url = uri("https://dl.bintray.com/kotlin/kotlin-dev") }
		}
	}
	dependencies {
		classpath("com.gradle.publish:plugin-publish-plugin:0.10.1")
		classpath("org.jetbrains.kotlin.jvm:org.jetbrains.kotlin.jvm.gradle.plugin:$kotlinVersion")

    }
}

plugins {
	id("com.moowork.node") version "1.3.1"
}

def kotlinVersion = project.properties["kotlinVersion"]?.toString() ?: ""
def isKotlinDev = kotlinVersion.contains("-release")

allprojects {
	repositories {
		mavenLocal {
			content {
				excludeGroup("Kotlin/Native")
			}
		}
		maven {
			url = uri("https://dl.bintray.com/korlibs/korlibs")
			content {
				excludeGroup("Kotlin/Native")
			}
		}
		jcenter {
			content {
				excludeGroup("Kotlin/Native")
			}
		}
		google {
			content {
				excludeGroup("Kotlin/Native")
			}
		}
		if (isKotlinDev) {
			maven { url = uri("https://dl.bintray.com/kotlin/kotlin-dev") }
		}
	}
}

def version(String name) {
	return properties["${name}Version"]
}

//new File("korge-build/src/main/kotlin/com/soywiz/korge/build/BuildVersions.kt").write("""
new File(rootDir, "korge-gradle-plugin/src/main/kotlin/com/soywiz/korge/gradle/BuildVersions.kt").text = ("""
package com.soywiz.korge.gradle

object BuildVersions {
	const val KLOCK = "${version("klock")}"
	const val KDS = "${version("kds")}"
	const val KMEM = "${version("kmem")}"
	const val KORMA = "${version("korma")}"
	const val KORIO = "${version("korio")}"
	const val KORIM = "${version("korim")}"
	const val KORAU = "${version("korau")}"
	const val KORGW = "${version("korgw")}"
	const val KORGE = "${version("korge")}"
	const val KOTLIN = "${version("kotlin")}"
	const val COROUTINES = "${version("coroutines")}"
}
""")

def publishUser = (rootProject.findProperty("BINTRAY_USER") ?: project.findProperty("bintrayUser") ?: System.getenv("BINTRAY_USER"))?.toString()
def publishPassword = (rootProject.findProperty("BINTRAY_KEY") ?: project.findProperty("bintrayApiKey") ?: System.getenv("BINTRAY_API_KEY"))?.toString()

subprojects {
	repositories {
		mavenLocal()
		jcenter()
		maven { url = uri("https://plugins.gradle.org/m2/") }
		maven { url = uri("https://dl.bintray.com/korlibs/korlibs") }
	}

	apply plugin: "maven"
	apply plugin: "maven-publish"
    apply plugin: "kotlin"

	//println("project: ${project.name}")

	task sourcesJar(type: Jar) {
		archiveClassifier.set("sources")
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar) {
		archiveClassifier.set("javadoc")
	}

	publishing {
		if (publishUser != null && publishPassword != null) {
			repositories {
				maven {
					credentials {
						username = publishUser
						setPassword(publishPassword)
					}
					url = uri("https://api.bintray.com/maven/${project.property("project.bintray.org")}/${project.property("project.bintray.repository")}/${project.property("project.bintray.package")}/")
				}
			}
		}
		publications {
			maven(MavenPublication) {
				groupId = project.group
				artifactId = project.name
				version = project.version
				from components.java
				artifact(sourcesJar)
				artifact(javadocJar)

				pom {
					name = project.name
					description = project.property("project.description")
					url = project.property("project.scm.url")
					licenses {
						license {
							name = project.property("project.license.name")
							url = project.property("project.license.url")
						}
					}
					scm {
						url = project.property("project.scm.url")
					}
				}
			}
		}
	}
}

task publish(type: Task) {
	subprojects {
		dependsOn(":${project.name}:publish")
	}
	doLast {
		def subject = project.property("project.bintray.org")
		def repo = project.property("project.bintray.repository")
		def _package = project.property("project.bintray.package")
		def version = project.version

		((HttpURLConnection)new URL("https://bintray.com/api/v1/content/$subject/$repo/$_package/$version/publish").openConnection()).with({
			requestMethod = 'POST'
			doOutput = true

			setRequestProperty("Authorization", "Basic " + "$publishUser:$publishPassword".bytes.encodeBase64().toString())
			outputStream.withPrintWriter({printWriter ->
				printWriter.write('{"discard": false, "publish_wait_for_secs": -1}')
			})
			System.out.println(inputStream.text)
		})
	}
}
