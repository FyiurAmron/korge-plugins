import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType

apply plugin: "kotlin"
apply plugin: "java"

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

Properties gradleProperties = new Properties()
gradleProperties.load(new StringReader(new File(rootDir, "gradle.properties").text))
ext.gradleProperties = gradleProperties
//println(gradleProperties)

def version(String name) {
	return gradleProperties["${name}Version"]
}

configurations {
	rtArtifacts { }
}

def setKDep(ExternalModuleDependency it) {
	it.targetConfiguration = "default"
	//it.targetConfiguration = "runtime"
	it.attributes { attribute(KotlinPlatformType.attribute, KotlinPlatformType.jvm) }
	it.transitive(true)
}

dependencies {
	rtArtifacts("com.soywiz.korlibs.krypto:krypto-jvm:${version("krypto")}") { setKDep(it) }
	rtArtifacts("com.soywiz.korlibs.korinject:korinject-jvm:${version("korinject")}") { setKDep(it) }
	rtArtifacts("com.soywiz.korlibs.kds:kds-jvm:${version("kds")}") { setKDep(it) }
	rtArtifacts("com.soywiz.korlibs.kmem:kmem-jvm:${version("kmem")}") { setKDep(it) }
	rtArtifacts("com.soywiz.korlibs.korio:korio-jvm:${version("korio")}") { setKDep(it) }
	rtArtifacts("com.soywiz.korlibs.korma:korma-jvm:${version("korma")}") { setKDep(it) }
	rtArtifacts("com.soywiz.korlibs.korim:korim-jvm:${version("korim")}") { setKDep(it) }
	rtArtifacts("com.soywiz.korlibs.korgw:korgw-jvm:${version("korgw")}") { setKDep(it) }
	rtArtifacts("com.soywiz.korlibs.korge:korge-jvm:${version("korge")}") { setKDep(it) }
	rtArtifacts("com.soywiz.korlibs.korge:korge-swf-jvm:${version("korge")}") { setKDep(it) }
	rtArtifacts("org.jetbrains.kotlinx:kotlinx-coroutines-core:${version("coroutines")}")
}

//println(configurations["rtArtifacts"].getAll().toList())

//configurations["rtArtifacts"].resolvedConfiguration.resolvedArtifacts.each {
//	//println(configurations["rtArtifacts"].getFiles())
//	println(it)
//}

tasks.create("processrtRtArtifacts") {

	inputs.files(configurations["rtArtifacts"])
	outputs.dir("src/main/resources")
	doLast {
		for (file in configurations["rtArtifacts"]) {
			if (file.name.contains("kotlin-stdlib")) continue
			if (file.name.contains("annotations-13")) continue
			println(file)
			copy {
				from(zipTree(file))
				into("src/main/resources")
				//into("libs")
			}
		}
	}
}

//kotlin.sourceSets {
//	jvmMain {
//		resources.srcDir("libs")
//	}
//}

//tasks.getByName("processResources").dependsOn("processrtRtArtifacts")

processResources {
	dependsOn("processrtRtArtifacts")
}


/*
jar {
	manifest {
		attributes "Main-Class": "com.baeldung.fatjar.Application"
	}

	from {
		//configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	}
}
*/

publishing {
	publications {
		maven(MavenPublication) {
			groupId = project.group
			artifactId = project.name
			version = project.version

			from components.java
		}
	}
}
